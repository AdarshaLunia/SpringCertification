package com.baselogic.service;

// Hamcrest
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

// JUnit
//import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

// Mockito
import static org.mockito.Matchers.any;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

// PowerMock
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;

// Project
import com.baselogic.dao.OrderDAO;
import com.baselogic.domain.Order;

import com.baselogic.util.ExampleUtils;


@RunWith(PowerMockRunner.class)
@SuppressStaticInitializationFor("com.baselogic.util.ExampleUtils")

@PrepareForTest({ ExampleUtils.class })
public class OrderPowerMockServiceTests {

	@InjectMocks OrderServiceImpl orderService = new OrderServiceImpl();

	@Mock OrderDAO orderDao;
	
	@Mock ExampleUtils exampleUtils;
	
	@Mock UnImplementedService unImplementedService;
	
	@Before
	public void beforeEachUnitTest(){
		
		MockitoAnnotations.initMocks(this);
	}

	@After
	public void afterEachUnitTest(){}

	//----- Test methods ----------------------------------------------------//    

	@Test
	public void testGetMessage() throws Exception {
		String result = orderService.getMessage();
		
		assertThat(result, is(nullValue()));
	}


	//----- Mock Test methods -----------------------------------------------//
	/*-----------------------------------------------------------------------//
	 * Mockito:
	 * http://code.google.com/p/mockito/
	 * 
	 * PowerMock:
	 * http://code.google.com/p/powermock/
	 * 
	 * PowerMock Mockito Extensions:
	 * http://code.google.com/p/powermock/wiki/MockitoUsage13
	 *-----------------------------------------------------------------------*/

	/**
	 * These are all the same:
	 * @PrepareForTest({ ExampleUtils.class })
	 * PowerMockito.mockStatic(ExampleUtils.class);
	 * Mockito.when(ExampleUtils.staticFunction()).thenReturn("some mocked value");
	 * 
	 * @throws Exception
	 */
	@Test // basic
	public void staticMockAnnotation() throws Exception {
		
		PowerMockito.mockStatic(ExampleUtils.class);
		
		when(ExampleUtils.staticFunction()).thenReturn("some static mocked value");

		String result = orderService.staticFunctions();
		
		assertThat(result, is("OrderServiceImpl: function(): some static mocked value: OrderServiceImpl: staticFunction"));

		PowerMockito.verifyStatic();
		ExampleUtils.staticFunction();
	}

	@Test // basic
	public void staticMockPowerMock() throws Exception {
		
		//These are all the same: 
		//@PrepareForTest({ ExampleUtils.class })
		//PowerMockito.mockStatic(ExampleUtils.class);
		//Mockito.when(ExampleUtils.staticFunction()).thenReturn("some mocked value");
		
	}

	@Test // basic
	public void staticMockMockito() throws Exception {
		
		//These are all the same: 
		//@PrepareForTest({ ExampleUtils.class })
		//PowerMockito.mockStatic(ExampleUtils.class);
		//Mockito.when(ExampleUtils.staticFunction()).thenReturn("some mocked value");
		
	}

	
	/*TODO: @Test //int
	public void mockMultipleExceptions() throws Exception {
		
	}*/

	/*@Test //int
	public void mockStaticMethodThrowsException() throws Exception {}*/

	
	/*@Test //adv
	public void privatePartialMock() throws Exception {
		//verifyPrivate(tested).invoke("privateMethodName", argument1);
	}*/

	/*@Test //adv
	public void privateRemoteMock() throws Exception {}*/


} // the end...
