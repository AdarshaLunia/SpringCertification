<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	">
    
    <!-- Setting message bean via direct property: -->
    <bean   id="exampleService"
            name="altExampleService, exampleServiceAlias"
            class="com.baselogic.service.ExampleServiceImpl"
            p:message="Simple p namespaced XML Configuration" />

    <!-- Setting message bean via property reference: -->
    <bean   name="exampleServiceTwo"
            class="com.baselogic.service.ExampleServiceImpl"
            p:message-ref="message" />

	<!--
	// Singleton Pattern
	ExampleService service = new ExampleServiceImpl();
	
	
	// What this would look like in Java:
	HashMap<String, Object> springApplicationContext = new HashMap<String, Object>();
	
	// Add entry by ID:
    springApplicationContext.put( "exampleService", service );
    
    // Add entry by Name
    springApplicationContext.put( "altExampleService", service );
    springApplicationContext.put( "exampleServiceTwo", service );
	
	
	
	// Get Entry:
	(ExampleService) springApplicationContext.get( "exampleService" );
	
	// Create a Proxy (Proxy Pattern)
	ExampleService exampleService = springApplicationContext.getBean("exampleService", ExampleService.class);
	
	 -->
	 
	 <bean id="message" class="java.lang.String">
        <constructor-arg type="java.lang.String" value="String Bean Message Reference" />
    </bean>
    
    <bean id="constructorInjectionComponent"
            class="com.baselogic.components.ConstructorInjectionComponent">
            <!-- <constructor-arg value="Constructor Argument Message Value" /> -->
    </bean>


</beans>
