<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-autowire="byName"
>

    <!--<context:component-scan base-package="com.baselogic.tutorials.components" />-->

    <!-- Setting message bean via direct property: -->
    <!--<bean   id="simpleComponent"
            name="simpleComponentAlias"
            class="com.baselogic.tutorials.components.SimpleComponent"
            p:message="Simple p namespaced XML Configuration" />-->

    <!-- Setting message bean via property reference: -->
    <!--<bean   name="simpleComponentTwo"
            class="com.baselogic.tutorials.components.SimpleComponent"
            p:message-ref="messageName" />-->

    <!--
    // Singleton Pattern
    ExampleService service = new ExampleServiceImpl();


    // What this would look like in Java:
    HashMap<String, Object> springApplicationContext = new HashMap<String, Object>();

    // Add entry by ID:
    springApplicationContext.put( "exampleService", service );

    // Add entry by Name
    springApplicationContext.put( "altExampleService", service );
    springApplicationContext.put( "exampleServiceTwo", service );



    // Get Entry:
    (ExampleService) springApplicationContext.get( "exampleService" );

    // Create a Proxy (Proxy Pattern)
    ExampleService exampleService = springApplicationContext.getBean("exampleService", ExampleService.class);

     -->

    <!--<bean id="message" class="java.lang.String">
        <constructor-arg type="java.lang.String" value="String Bean Message Reference" />
    </bean>-->

    <!--<bean name="messageName" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="String Bean Message Reference without ID." />
    </bean>

    <bean id="constructorInjectionComponent" class="com.baselogic.tutorials.components.ConstructorInjectionComponent">
        <constructor-arg ref="messageName" />
    </bean>

    <bean id="multipleConstructorInjectionComponent"
          class="com.baselogic.tutorials.components.MultipleConstructorInjectionComponent">
        <constructor-arg type="java.lang.String"
            value="Constructor Arg 1"  />
        <constructor-arg type="java.lang.String"
            value="Constructor Arg 2" />
    </bean>

    <bean id="multipleConstructorInjectionComponentByIndex"
          class="com.baselogic.tutorials.components.MultipleConstructorInjectionComponent">
        <constructor-arg index="1" type="java.lang.String"
            value="Constructor Arg 2" />
        <constructor-arg index="0" type="java.lang.String"
                         value="Constructor Arg 1"  />
    </bean>-->

    <!--
        Singleton by default (property scope="singleton" is assumed)
    -->
    <!--<bean  id="propertyInjectionComponent"
           class="com.baselogic.tutorials.components.PropertyInjectionComponent"
           p:message="singleton string message"
           p:someInt="1234567890"
           p:someDouble="#{ T(java.lang.Math).random() * 100.0 }"
    />-->

    <!-- Prototype Scope -->
    <!--<bean  id="prototypePropertyInjectionComponent"
           class="com.baselogic.tutorials.components.PropertyInjectionComponent"
           p:message="prototype string message"
           p:someInt="1234567890"
           p:someDouble="#{ T(java.lang.Math).random() * 100.0 }"
           scope="prototype"
    />-->

</beans>
